I"Jn<p><img src="https://velog.velcdn.com/images/-__-/post/da183efa-1b7a-485f-a764-c87eb6f03333/image.png" alt="" /></p>

<h2 id="kip-7-기반-토큰코인-만들기">KIP-7 기반 토큰(코인) 만들기</h2>

<h3 id="baobab-테스트넷에-kip-7-토큰-만들고-배포하기">Baobab 테스트넷에 KIP-7 토큰 만들고 배포하기</h3>

<p>-1. 카이카스에 접속하고, <strong>Baobab 테스트넷</strong> 을 선택한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/5d7fc008-e8ea-4f6e-aa56-cd099c528864/image.png" alt="" /></p>

<hr />

<p>-2. <strong>Baobab 테스트넷</strong> 에서 사용할 테스트용 KLAY 를 받는다
https://baobab.wallet.klaytn.foundation/faucet
(Baobab 테스트넷 클레이튼 Faucet 👆)</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/4397731e-8ec3-4fe9-a49a-2d8d35d43d23/image.png" alt="" /></p>

<hr />

<p>-3. Kaikas 지갑에서 <strong>개인키</strong>를 발급받는 방법</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/ea31b0d8-c7e7-4693-b054-684fddf71fbc/image.png" alt="" /></p>

<p><img src="https://velog.velcdn.com/images/-__-/post/f5d65c34-a111-44ea-936b-942a8e34a7c1/image.png" alt="" /></p>

<hr />

<p>-4. Klaytn IDE에서 <code class="language-plaintext highlighter-rouge">SimpleToken.sol</code> 파일을 생성 후 코드를 입력한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/12c671d1-a6e3-40d9-86bc-06791daff5bd/image.png" alt="" /></p>

<hr />

<p>-5. EVM VERSION 을 👉 byzantium 으로 선택 후 컴파일 한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/f81cc749-c696-4c25-86af-6d1c3b2fc1d0/image.png" alt="" /></p>

<hr />

<p>-6. DEPLOY &amp; RUN TRANSACTIONS 항목으로 이동한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/3146ba6c-11bd-4508-9b66-ca3dfdcad608/image.png" alt="" /></p>

<blockquote>
  <p>6-1. ENVIRONMENT 부분을
<u>Baobab로 변경</u>하여 <strong>‘카이카스’</strong>와 연동한다
<br />
6-2. Account 옆에있는 + 버튼을 눌러서
발급받은 <strong>개인키</strong>를 입력한다
<br />
6-3. DEPLOY에 들어갈 인자값을 입력한다</p>
</blockquote>

<ul>
  <li>GETNAME 👉 코인이름</li>
  <li>GETSYMBOL 👉 코인이름약자
<br /></li>
</ul>

<p>6-4. 설정이 완료되면 <strong>transact</strong> 버튼을 누른다</p>

<hr />

<p>-7. klaytn finder 에 주소를 입력후 컨트랙트 주소를 확인해본다
<a href="https://baobab.klaytnfinder.io/">https://baobab.klaytnfinder.io/</a><br />
(이더스캔과 같은 klaytn finder 👆)</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/8a49f912-274b-4c6f-8e2e-0be8001ad7fb/image.png" alt="" /></p>

<hr />

<p>-8. 토큰 추가를 클릭하여 컨트랙트 주소를 입력하고 추가한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/14035fbe-8674-4210-b84b-492daf847dbe/image.png" alt="" /></p>

<hr />

<p>-9. KIP-7 코드의 설정한 <strong>‘총 발행량 (totalSupply)’</strong> 개수만큼
잔액이 적용된 토큰을 확인 할 수 있다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/0c80d43c-8bfb-44d0-99af-0d1fe4c448f4/image.png" alt="" /></p>

<blockquote>
  <p><strong>🪙 토큰 주고 받기 테스트까지 성공</strong></p>
</blockquote>

<hr />

<h3 id="kip-7-기반-토큰을-만들기-위한-코드">KIP-7 기반 토큰을 만들기 위한 코드</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: GPL-3.0</span>
<span class="nx">pragma</span> <span class="nx">solidity</span> <span class="mf">0.5</span><span class="p">.</span><span class="mi">6</span><span class="p">;</span>

<span class="c1">// KIP-7은 ERC-20을 기반으로 만들어졌다</span>
<span class="c1">// 솔리디티에서 'Interface'는 사용할 함수의 형태를 선언한다</span>
<span class="c1">// 실제 함수의 내용은 Contract에서 사용한다</span>
<span class="c1">// 기본적인 KIP-7의 인터페이스 목록이다 👇</span>

<span class="nx">contract</span> <span class="nx">IKIP</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="nx">external</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">account</span><span class="p">)</span> <span class="nx">external</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">amount</span><span class="p">)</span>
        <span class="nx">external</span>
        <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">amount</span><span class="p">)</span> <span class="nx">external</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">spender</span><span class="p">)</span>
        <span class="nx">external</span>
        <span class="nx">view</span>
        <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">spender</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">recipient</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">)</span> <span class="nx">external</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">);</span>

    <span class="c1">// 함수(function)는 이더리움에서 제공하는 함수이며, event는 이더리움에서 제공하는 로그이다</span>
    <span class="c1">// 'function'과 'event'를 선언할 때는 입력값과 반환값은 선택할 수 있으나,</span>
    <span class="c1">// 'function'의 자료형 / 이름 / 순서를 주의해야 한다</span>

    <span class="nx">event</span> <span class="nx">Transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">indexed</span> <span class="k">from</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">amount</span><span class="p">);</span>
    <span class="nx">event</span> <span class="nx">Transfer</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">spender</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">indexed</span> <span class="k">from</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">to</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">);</span>
    <span class="nx">event</span> <span class="nx">Approval</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">owner</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">indexed</span> <span class="nx">spender</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">oldAmount</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 'IKIP'의 ⭐ 'Transfer' 이벤트는 토큰이 이동할 때마다 로그를 남기고,</span>
<span class="c1">// ⭐ 'Approval' 이벤트는 'approve' 함수가 실행 될 때 로그를 남긴다</span>

<span class="c1">//----------------------------------------------------------</span>

<span class="c1">// 👉 'IKIP'는 'SimpleKlaytnToken' 컨트랙트에서 사용할 함수의 형태를 선언하며,</span>
<span class="c1">// 'KIP-7' 에서 사용하는 함수들의 형태를 선언한 것을 확인할 수 있다</span>

<span class="nx">contract</span> <span class="nx">SimpleKlaytnToken</span> <span class="nx">is</span> <span class="nx">IKIP</span> <span class="p">{</span>
    <span class="c1">// contract SimpleKlaytnToken 뒤에 'is IKIP'를 붙여서</span>
    <span class="c1">// SimpleKlaytnToken 컨트랙트가 'IKIP' 함수를 사용할 수 있다고 선언한다</span>
    <span class="c1">// 이렇게 사용하면 'SimpleKlaytnToken' 안에서 'IKIP'에 선언된 함수와 이벤트를 사용할 수 있다</span>

    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">)</span> <span class="kr">private</span> <span class="nx">_balances</span><span class="p">;</span>
    <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">mapping</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">uint256</span><span class="p">))</span> <span class="kr">public</span> <span class="nx">_allowances</span><span class="p">;</span>
    <span class="c1">// 이중으로 매핑된 approvals를 확인할 수 있다</span>

    <span class="nx">uint256</span> <span class="kr">public</span> <span class="nx">_totalSupply</span><span class="p">;</span> <span class="c1">// 토큰 총발행량</span>
    <span class="nx">string</span> <span class="kr">public</span> <span class="nx">_name</span><span class="p">;</span> <span class="c1">// 토큰 이름</span>
    <span class="nx">string</span> <span class="kr">public</span> <span class="nx">_symbol</span><span class="p">;</span> <span class="c1">// 토큰 약자</span>
    <span class="nx">uint8</span> <span class="kr">public</span> <span class="nx">_decimals</span><span class="p">;</span> <span class="c1">// 18진수</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">string</span> <span class="nx">memory</span> <span class="nx">getName</span><span class="p">,</span> <span class="nx">string</span> <span class="nx">memory</span> <span class="nx">getSymbol</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
        <span class="nx">_name</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">;</span>
        <span class="nx">_symbol</span> <span class="o">=</span> <span class="nx">getSymbol</span><span class="p">;</span>
        <span class="nx">_decimals</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
        <span class="nx">_totalSupply</span> <span class="o">=</span> <span class="mi">100000000</span><span class="nx">e18</span><span class="p">;</span> <span class="c1">// 토큰 총발행량 설정</span>
        <span class="nx">_balances</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_totalSupply</span><span class="p">;</span> <span class="c1">// 추가</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">symbol</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">string</span> <span class="nx">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_symbol</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">decimals</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint8</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_decimals</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">totalSupply</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_totalSupply</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 👉 totalSupply는 토큰의 총 발행량을 반환한다</span>

    <span class="kd">function</span> <span class="nx">balanceOf</span><span class="p">(</span><span class="nx">address</span> <span class="nx">account</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_balances</span><span class="p">[</span><span class="nx">account</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 👉 balanceOf는 매핑된 값인 '_balanceOf'에서 입력한</span>
    <span class="c1">//    address인 account가 가지고있는 토큰의 수를 리턴한다</span>

    <span class="kd">function</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">amount</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">_transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
        <span class="nx">emit</span> <span class="nx">Transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 👉 transfer는 내부 함수인 '_transfer'를 호출한다</span>
    <span class="c1">// 호출이 정상적으로 완료되었을 경우 Transfer event를 발생시킴</span>

    <span class="kd">function</span> <span class="nx">allowance</span><span class="p">(</span><span class="nx">address</span> <span class="nx">owner</span><span class="p">,</span> <span class="nx">address</span> <span class="nx">spender</span><span class="p">)</span>
        <span class="kr">public</span>
        <span class="nx">view</span>
        <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_allowances</span><span class="p">[</span><span class="nx">owner</span><span class="p">][</span><span class="nx">spender</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// allowance는 입력한 두개의 주소값에 대한 '_allowances'값,</span>
    <span class="c1">// 다시말해 '내가(owner)'가 '토큰을 양도할 상대방(spender)'에게 토큰을 등록한 양을 반환한다</span>

    <span class="kd">function</span> <span class="nx">approve</span><span class="p">(</span><span class="nx">address</span> <span class="nx">spender</span><span class="p">,</span> <span class="nx">uint256</span> <span class="nx">amount</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">uint256</span> <span class="nx">currentAllownace</span> <span class="o">=</span> <span class="nx">_allowances</span><span class="p">[</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">][</span><span class="nx">spender</span><span class="p">];</span>
        <span class="nx">require</span><span class="p">(</span>
            <span class="nx">currentAllownace</span> <span class="o">&gt;=</span> <span class="nx">amount</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">ERC20: Transfer amount exceeds allowance</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="nx">_approve</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">spender</span><span class="p">,</span> <span class="nx">currentAllownace</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">transferFrom</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">sender</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">recipient</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">)</span> <span class="kr">public</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">_transfer</span><span class="p">(</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
        <span class="nx">emit</span> <span class="nx">Transfer</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">recipient</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
        <span class="nx">uint256</span> <span class="nx">currentAllowance</span> <span class="o">=</span> <span class="nx">_allowances</span><span class="p">[</span><span class="nx">sender</span><span class="p">][</span><span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">];</span>
        <span class="nx">require</span><span class="p">(</span>
            <span class="nx">currentAllowance</span> <span class="o">&gt;=</span> <span class="nx">amount</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">ERC20: transfer amount exceeds allowance</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="nx">_approve</span><span class="p">(</span>
            <span class="nx">sender</span><span class="p">,</span>
            <span class="nx">msg</span><span class="p">.</span><span class="nx">sender</span><span class="p">,</span>
            <span class="nx">currentAllowance</span><span class="p">,</span>
            <span class="nx">currentAllowance</span> <span class="o">-</span> <span class="nx">amount</span>
        <span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 👉 transferFrom은 양도를 수행하는 거래 대행자(msg.sender)가 sender가 허락해준 값만큼 상대방(recipient)에게 토큰을 이동한다</span>
    <span class="c1">// 이동을 위해 _transfer 함수를 실행시킨다</span>
    <span class="c1">// '_transfer' 에서는 양도를 하는 sender의 잔고를 amount만큼 줄이고, recipient의 잔고를 amount만큼 늘린다</span>
    <span class="c1">// '_transfer' 함수 실행이 완료되고, require를 모두 통과한다면 currentAllowance를 체크하여 _approve 함수를 실행한다</span>

    <span class="kd">function</span> <span class="nx">_transfer</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">sender</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">recipient</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">)</span> <span class="nx">internal</span> <span class="p">{</span>
        <span class="nx">require</span><span class="p">(</span><span class="nx">sender</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="dl">"</span><span class="s2">ERC20: transfer from the zero address</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">require</span><span class="p">(</span><span class="nx">recipient</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="dl">"</span><span class="s2">ERC20: transfer to the zero address</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">uint256</span> <span class="nx">senderBalance</span> <span class="o">=</span> <span class="nx">_balances</span><span class="p">[</span><span class="nx">sender</span><span class="p">];</span>
        <span class="nx">require</span><span class="p">(</span>
            <span class="nx">senderBalance</span> <span class="o">&gt;=</span> <span class="nx">amount</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">ERC20: transfer amount exceeds balance</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="nx">_balances</span><span class="p">[</span><span class="nx">sender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">senderBalance</span> <span class="o">-</span> <span class="nx">amount</span><span class="p">;</span>
        <span class="nx">_balances</span><span class="p">[</span><span class="nx">recipient</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">amount</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// _transfer는 require를 통해 세가지 조건을 검사한다</span>
    <span class="c1">// 1. 보내는 사람의 주소가 잘못되었는지 체크한다</span>
    <span class="c1">// 2. 받는사람의 주소가 잘못되었는지 체크한다</span>
    <span class="c1">// 3. transfer 함수를 실행한 사람(sender)이 가진 토큰(senderBalance)이 신청한 값(amount)보다 많은 토큰을 가지고 있는지 체크한다</span>
    <span class="c1">// 👉 위의 세 조건을 충족하는 경우,</span>
    <span class="c1">// 실행한 사람(sender)이 가진 토큰의 지갑에서 토큰을 개수만큼 빼고,</span>
    <span class="c1">// 받을 사람(recipient)의 토큰 지갑에 개수만큼 더해준다</span>

    <span class="kd">function</span> <span class="nx">_approve</span><span class="p">(</span>
        <span class="nx">address</span> <span class="nx">owner</span><span class="p">,</span>
        <span class="nx">address</span> <span class="nx">spender</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">currentAmount</span><span class="p">,</span>
        <span class="nx">uint256</span> <span class="nx">amount</span>
    <span class="p">)</span> <span class="nx">internal</span> <span class="p">{</span>
        <span class="nx">require</span><span class="p">(</span><span class="nx">owner</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="dl">"</span><span class="s2">ERC20: approve from the zero address</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">require</span><span class="p">(</span><span class="nx">spender</span> <span class="o">!=</span> <span class="nx">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="dl">"</span><span class="s2">ERC20: approve to the zero address</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">require</span><span class="p">(</span>
            <span class="nx">currentAmount</span> <span class="o">==</span> <span class="nx">_allowances</span><span class="p">[</span><span class="nx">owner</span><span class="p">][</span><span class="nx">spender</span><span class="p">],</span>
            <span class="dl">"</span><span class="s2">ERC20: invalid currentAmount</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="nx">_allowances</span><span class="p">[</span><span class="nx">owner</span><span class="p">][</span><span class="nx">spender</span><span class="p">]</span> <span class="o">=</span> <span class="nx">amount</span><span class="p">;</span>
        <span class="nx">emit</span> <span class="nx">Approval</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">spender</span><span class="p">,</span> <span class="nx">currentAmount</span><span class="p">,</span> <span class="nx">amount</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 내부 함수인 _approve를 호출한다</span>
    <span class="c1">//_approve에서는 내가 토큰을 양도할 상대방(spender)에게 양도할 값(amount)를 allowances에 기록한다</span>
    <span class="c1">// 그리고 Approval event를 호출하여 기록한다</span>
    <span class="c1">// 이 상태에서는 양도가 실제로 이루어진 것이 아니라, 양도를 할 주소와 양을 정한 것이다</span>
    <span class="c1">// 👉 approve는 단순 변경을 위한 함수이기 때문에 내부적으로 값을 올리고,</span>
    <span class="c1">// 내리는 'increaseApproval'과 / 'decreaseApproval' 함수를 사용하기도 한다</span>
    <span class="c1">// approve 는 spender 가 당신의 계정으로부터 amount 한도 하에서 여러 번 출금하는 것을 허용합니다.</span>
    <span class="c1">// 이 함수를 여러번 호출하면, 단순히 허용량을 amount 으로 재설정한다</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
:ET