I"#<h2 id="beb-4th-til-58일차-회고">[BEB 4th TIL] 58일차 회고</h2>

<p><img src="https://velog.velcdn.com/images/-__-/post/93180806-bc22-44c2-a9aa-95d3d196ee65/image.png" alt="" /></p>

<p><strong>DID를 활용한 dApp 개발</strong></p>

<h2 id="오늘-배운-내용-">오늘 배운 내용 ✍</h2>

<ul>
  <li>DID를 활용한 졸업증명서 개발하기</li>
</ul>

<hr />

<h3 id="did를-활용한-졸업증명서-개발하기-위한-코드">DID를 활용한 졸업증명서 개발하기 위한 코드</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: GPL-3.0
</span>
<span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.5</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">CredentialBox</span> <span class="p">{</span>
    <span class="kt">address</span> <span class="k">private</span> <span class="n">issuerAddress</span><span class="p">;</span>
    <span class="kt">uint256</span> <span class="k">private</span> <span class="n">idCount</span><span class="p">;</span>
    <span class="k">mapping</span><span class="p">(</span><span class="kt">uint8</span> <span class="o">=&gt;</span> <span class="kt">string</span><span class="p">)</span> <span class="k">private</span> <span class="n">alumniEnum</span><span class="p">;</span>

    <span class="k">struct</span> <span class="n">Credential</span> <span class="p">{</span>
        <span class="kt">uint256</span> <span class="n">id</span><span class="p">;</span> <span class="c1">// index순서를 표기하는 idCount
</span>        <span class="kt">address</span> <span class="n">issuer</span><span class="p">;</span>
        <span class="c1">// 발급자, 하나 혹은 그 이상의 주체에 대한 클레임을 주장하고,
</span>        <span class="c1">// 그 클레임으로부터 검증가능한 크리덴셜을 생성하며 검증가능한 크리덴셜을 보유자에게 전달하는 엔터티의 역할
</span>        <span class="kt">uint8</span> <span class="n">alumniType</span><span class="p">;</span> <span class="c1">// 졸업증명서 타입
</span>        <span class="kt">string</span> <span class="n">value</span><span class="p">;</span>
        <span class="c1">// 크리덴셜에 포함되어야하는 암호화된 정보.
</span>        <span class="c1">// 중앙화된 서버에서 제공하는 신원, 신원 제공자, 엔터티, 서명 등이 JSON 형태로 저장한다.
</span>    <span class="p">}</span>
    <span class="c1">// 👆 위 코드는 검증가능한 크리덴셜인 VC를 구현하기 위한 구조체이다
</span>
    <span class="k">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="n">Credential</span><span class="p">)</span> <span class="k">private</span> <span class="n">credentials</span><span class="p">;</span>

    <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">issuerAddress</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">;</span>
        <span class="n">idCount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">alumniEnum</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">"SEB"</span><span class="p">;</span>
        <span class="n">alumniEnum</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"BEB"</span><span class="p">;</span>
        <span class="n">alumniEnum</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">"AIB"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// claimCredential 함수로 Credential을 발행하고,
</span>    <span class="c1">// getCredential 함수를 통해 Credential을 발행한 주소에서 VC를 확인하는 간단한 구조이다
</span>    <span class="k">function</span> <span class="n">claimCredential</span><span class="p">(</span>
        <span class="kt">address</span> <span class="n">_alumniAddress</span><span class="p">,</span>
        <span class="kt">uint8</span> <span class="n">_alumniType</span><span class="p">,</span>
        <span class="kt">string</span> <span class="k">calldata</span> <span class="n">_value</span>
    <span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">issuerAddress</span> <span class="o">==</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">,</span> <span class="s">"Not Issuer"</span><span class="p">);</span>
        <span class="n">Credential</span> <span class="k">storage</span> <span class="n">credential</span> <span class="o">=</span> <span class="n">credentials</span><span class="p">[</span><span class="n">_alumniAddress</span><span class="p">];</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">credential</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">credential</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">idCount</span><span class="p">;</span>
        <span class="n">credential</span><span class="p">.</span><span class="n">issuer</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">;</span>
        <span class="n">credential</span><span class="p">.</span><span class="n">alumniType</span> <span class="o">=</span> <span class="n">_alumniType</span><span class="p">;</span>
        <span class="n">credential</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">_value</span><span class="p">;</span>

        <span class="n">idCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// claimCredential 함수를 통해 발급자(issuer)는
</span>    <span class="c1">// 어떠한 주체(_alumniAddress)에게 크리덴셜(Credential)을 발행(claim)이 가능하게 된다
</span>
    <span class="c1">// getCredential 함수를 통해 Credential을 발행한 주소에서 VC를 확인하는 간단한 구조이다
</span>    <span class="k">function</span> <span class="n">getCredential</span><span class="p">(</span><span class="kt">address</span> <span class="n">_alumniAddress</span><span class="p">)</span>
        <span class="k">public</span>
        <span class="k">view</span>
        <span class="k">returns</span> <span class="p">(</span><span class="n">Credential</span> <span class="k">memory</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">credentials</span><span class="p">[</span><span class="n">_alumniAddress</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="c1">// getCredential 함수를 통해 어떠한 주체(_alumniAddress)를 통하여
</span>    <span class="c1">// 발행(claim)한 크리덴셜(Credential)을 확인할 수 있다
</span><span class="p">}</span>

<span class="c1">// JWT 로 암호화된 토큰
// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWRwIjoiY29kZSBzdGF0ZXMiLCJ0eXBlIjoiYmViIiwidG9rZW4iOiJ0ZXN0IiwidmFsdWUiOiLsvZTrk5zsiqTthYzsnbTsuKAgRElEIOyImOujjOymnSDrsJzquInsnYQg7JyE7ZWcIO2BrOumrOuNtOyFnCDthYzsiqTtirgifQ.qXTgkPcK43uZ4_FBLBTFjaTsnmV9sAAekgK8BUZBt1g
</span></code></pre></div></div>

<p><img src="https://velog.velcdn.com/images/-__-/post/daddd906-c06c-4b77-8447-8797a041d844/image.png" alt="" /></p>

<blockquote>
  <ul>
    <li>alumniAddress 👉 Credential을 발행받을 테스트넷 주소</li>
    <li>alumniType 👉 졸업증명서 타입. BEB이라면 1 입력</li>
    <li>value 👉 JWT로 암호화된 토큰</li>
  </ul>
</blockquote>

<hr />

<p><img src="https://velog.velcdn.com/images/-__-/post/035d2af7-ad3d-412b-88c2-7dcbc0d95261/image.png" alt="" /></p>

<blockquote>
  <p>Credential 컨펌이 완료되었다면, getCredential함수 실행<br /></p>

  <ul>
    <li>alumniAddress : Credential을 발행받은 주소</li>
  </ul>
</blockquote>

<hr />
:ET