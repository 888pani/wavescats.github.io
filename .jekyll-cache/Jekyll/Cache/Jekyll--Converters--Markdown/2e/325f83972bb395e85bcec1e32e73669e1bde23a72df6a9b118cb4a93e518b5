I"m<p><img src="https://velog.velcdn.com/images/-__-/post/efe7cdcb-666a-4b49-b478-662db8b03006/image.png" alt="" /></p>

<p>⭐ 하이퍼레저 패브릭 1.4 ver 기준</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

 <span class="k">import</span> <span class="p">(</span>
	 <span class="s">"bytes"</span>
	 <span class="s">"encoding/json"</span> <span class="c">// Marshal 사용</span>
	 <span class="s">"fmt"</span>
	 <span class="s">"strconv"</span>

	 <span class="s">"github.com/hyperledger/fabric/core/chaincode/shim"</span>
	 <span class="n">sc</span> <span class="s">"github.com/hyperledger/fabric/protos/peer"</span>
 <span class="p">)</span>
</code></pre></div></div>

<h4 id="shim--peer-설치-라이브러리-인터페이스">shim &amp; peer 설치 라이브러리 인터페이스</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">shim</code> 라이브러리에 내장된 함수</li>
</ul>

<p><strong>1. GetState( )</strong><br />
👉 원장의 데이터를 읽어올때 사용하는 함수</p>

<p><strong>2. PutState( )</strong><br />
👉 원장의 데이터를 집어넣을때 사용하는 함수</p>

<p><strong>3. GetFunctionAndParameters( )</strong><br />
👉 트랜잭션이 들어왔을때 트랜잭션 내용에 대해서<br />
스마트컨트랙트의 이름과 스마트컨트랙트를 동작시키는데<br />
필요한 파라미터들을 잘라주는 함수</p>

<blockquote>
  <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">function</span><span class="p">,</span> <span class="n">args</span> <span class="o">:=</span> <span class="n">stub</span><span class="o">.</span><span class="n">GetFunctionAndParameters</span><span class="p">()</span>
</code></pre></div>  </div>

  <p>👉 Func &amp; Para <br /></p>

  <ol>
    <li>
      <p>들어온 데이터를 스마트컨트랙트 <strong>함수 이름</strong>과<br /></p>
    </li>
    <li>
      <p>스마트컨트랙트가 동작하기 위한 <strong>파라미터들</strong>이 배열형식으로 들어온다<br /></p>
    </li>
    <li>
      <p>함수 이름과 파라미터를 <strong>잘라서</strong> 사용할수 있도록 처리</p>
    </li>
  </ol>
</blockquote>

<hr />

<h3 id="init-함수">Init 함수</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">SmartContract</span><span class="p">)</span> <span class="n">Init</span><span class="p">(</span><span class="n">APIstub</span> <span class="n">shim</span><span class="o">.</span><span class="n">ChaincodeStubInterface</span><span class="p">)</span> <span class="n">sc</span><span class="o">.</span><span class="n">Response</span> <span class="p">{</span>
	 <span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Success</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
 <span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">shim</code> 과 <code class="language-plaintext highlighter-rouge">peer</code> 를 불러와서 체인코드를 작성한다면<br />
⭐ <code class="language-plaintext highlighter-rouge">Init</code> 과 <code class="language-plaintext highlighter-rouge">Invoke</code> 를 필수로 써줘야한다</p>
</blockquote>

<ol>
  <li>
    <p>개발자가 체인코드를 작성하면 <strong>관리자</strong>에게 보내준다</p>
  </li>
  <li>
    <p>관리자는 블록체인(패브릭)에 자신의 <code class="language-plaintext highlighter-rouge">peer</code> 에게 체인코드를 설치 (copy)</p>
  </li>
  <li>
    <p>패브릭 네트워크에 체인코드를 <strong>활성화</strong> 시킨다 (배포)</p>
  </li>
  <li>
    <p>체인코드를 <strong>배포</strong>하게되면</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">peer</code> 는 체인코드 <strong>컨테이너</strong>를 생성</p>
  </li>
  <li>
    <p>해당 체인코드를 체인코드 컨테이너에 보내고 <strong>컴파일</strong></p>
  </li>
  <li>
    <p>그럼 트랜잭션을 받을 준비한다</p>
  </li>
  <li>
    <p><span style="background-color:#FFC701; color:#000;">체인코드가 활성화 된 후에 제일먼저 실행되는게 Init 함수다</span> ⭐</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">shim.Success(nil)</code> 👉 체인코드를 배포를 시킨 관리자에게</p>
  </li>
  <li>
    <p>관리자에 요청한 체인코드의 작업이 <strong>성공적</strong>으로 끝났다는 뜻</p>
  </li>
  <li>
    <p>배포를 했을때 문제가 있다면 <code class="language-plaintext highlighter-rouge">Init</code> 함수가 실행되지 않음</p>
  </li>
</ol>

<hr />

<h3 id="invoke-함수">Invoke 함수</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">SimpleChaincode</span><span class="p">)</span> <span class="n">Invoke</span><span class="p">(</span><span class="n">stub</span> <span class="n">shim</span><span class="o">.</span><span class="n">ChaincodeStubInterface</span><span class="p">)</span> <span class="n">pb</span><span class="o">.</span><span class="n">Response</span> <span class="p">{</span>
</code></pre></div></div>

<ol>
  <li>
    <p>체인코드 배포가 끝나고 <strong>어플, 웹서버</strong>가 동작을하게 되면</p>
  </li>
  <li>
    <p>사용자가 자신의 단말기(컴퓨터, 핸드폰, IOT 등)로 인터넷을 통해 트랜잭션을 <strong>일으킬때</strong></p>
  </li>
  <li>
    <p>트랜잭션 내용이 패브릭 네트워크내에 <code class="language-plaintext highlighter-rouge">peer</code> 에게 전달</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">peer</code> 는 트랜잭션을 받아서</p>
  </li>
  <li>
    <p>자신이 보유하고 있는 체인코드 <strong>컨테이너</strong>쪽에 그 트랜잭션을 보낸다</p>
  </li>
  <li>
    <p>그리고 <strong>시뮬레이션</strong>을 돌림</p>
  </li>
  <li>
    <p>그때 호출되는게 <code class="language-plaintext highlighter-rouge">Invoke</code> 함수이다</p>
  </li>
  <li>
    <p>사용자가 블록체인에 <strong>트랜잭션</strong>을 일으켰을때</p>
  </li>
  <li>
    <p><span style="background-color:#B5E045; color:#000;">데이터를 써 넣는다거나 / 읽어오거나 / 요청하거나 / 데이터를 저장할때</span></p>
  </li>
  <li>
    <p>반드시 호출되는게 <code class="language-plaintext highlighter-rouge">Invoke</code> 함수이다</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Invoke</code> 함수가 호출되어 동작하게되면 <code class="language-plaintext highlighter-rouge">peer</code>는 트랜잭션을 받은것이다</p>
  </li>
</ol>

<hr />

<blockquote>
  <h3 id="참고-코드">참고 코드</h3>
</blockquote>

<ul>
  <li><a href="https://github.com/wavescats/Go-Study/blob/main/Hyperledger%20Fabric%20(1.4ver)%20Chaincode%20%EC%98%88%EC%A0%9C/Example(shim.Success).go">shim &amp; peer - Init &amp; Invoke 예제</a></li>
</ul>

<hr />
:ET