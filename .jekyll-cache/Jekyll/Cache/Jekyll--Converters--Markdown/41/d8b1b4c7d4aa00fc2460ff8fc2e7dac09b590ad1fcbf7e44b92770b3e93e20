I"5,<p><img src="https://velog.velcdn.com/images/-__-/post/37f16109-4964-4468-bc63-bb7315243de8/image.png" alt="" /></p>

<p>⭐ 하이퍼레저 패브릭 1.4 ver 기준</p>

<h2 id="체인코드-배포-관리자의-관점">체인코드 배포 (관리자의 관점)</h2>

<h3 id="배포-명령어-순서">배포 명령어 순서</h3>

<blockquote>
  <p><br /></p>
  <ul>
    <li>
      <p>docker-compose -f docker-compose.yml up -d cli<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode install -n fabcar -v 1.0 -p github.com/fabcar/go<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode instantiate -o orderer.example.com:7050 -n fabcar -v 1.0 -c ‘{“Args”:[]}’ -C mychannel -P “OR (‘Org1MSP.member’,’Org2MSP.member’)”<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode invoke -o orderer.example.com:7050 -n fabcar -c ‘{“Args”:[“initLedger”]}’ -C mychannel<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode query -n fabcar -c ‘{“Args”:[“queryAllCars”]}’ -C mychannel<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode invoke -o orderer.example.com:7050 -n fabcar -c ‘{“Args”:[“createCar”,”CAR12”,”sm”,”sm3”,”red”,”shin”]}’ -C mychannel<br /></p>
    </li>
    <li>
      <p>docker exec cli peer chaincode query -n fabcar -c ‘{“Args”:[“queryCar”,”CAR12”]}’ -C mychannel<br />
<br /></p>
    </li>
  </ul>
</blockquote>

<ol>
  <li><code class="language-plaintext highlighter-rouge">docker-compose -f docker-compose.yml up -d cli</code><br />
👉 <code class="language-plaintext highlighter-rouge">-d</code> 옵션을 안주면 컨테이너를 생성하고 무한루프에 갇힌다<br />
👉 <code class="language-plaintext highlighter-rouge">cli</code> 라는 컨테이너 생성</li>
</ol>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">cli</code> 컨테이너는 하이퍼레저 블록체인 네트워크를 관리하는 콘솔 역할 (peer 에게 명령을 주는 관리자)</li>
</ol>

<p><img src="https://velog.velcdn.com/images/-__-/post/d61b7887-1006-444c-8409-ce91b330343c/image.png" alt="" /></p>

<blockquote>
  <p><br />
👆 cli 컨테이너 설정 (관리자용 콘솔)<br /></p>

  <h3 id="environment-환경변수">environment (환경변수)</h3>

  <ol>
    <li>체인코드에 대한 설치 배포명령 <code class="language-plaintext highlighter-rouge">GOPATH 환경변수</code></li>
    <li>연결할 peer 의 정보 (컨테이너 이름 or IP주소 or 도메인주소 등)</li>
    <li>컨테이너와 통신하는데 필요한 PORT 번호</li>
    <li>어떤 멤버십으로 연결을 할지 (조직멤버십)</li>
    <li>어떤 권한으로 peer 에게 접근할지 (멤버십 경로)</li>
    <li>어떤 권한으로 peer 에게 트랜잭션을 일으킬것인지<br />
(<strong>키와 인증서</strong>를 이용하여 권한 획득)<br /></li>
  </ol>

  <h3 id="volumes">volumes</h3>

  <ol>
    <li>리눅스 → 도커 → 이미지 → 컨테이너 생성</li>
    <li>컨테이너들이 사용할 세부적인 설정내용 / 파일은 이미지에 들어가지 않는다</li>
    <li>이런 경우에는 리눅스 시스템에 있는 디렉토리에서 <strong>세부값</strong>을 가져온다</li>
  </ol>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">/var/run/ : /host/var/run/</code><br />
<strong>’ : ‘ 를 기준으로</strong> <br />
앞에는 리눅스 디렉토리 경로 <br />
뒤에는 도커 컨테이너 저장 경로</p>
</blockquote>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode install -n fabcar -v 1.0 -p github.com/fabcar/go</code></li>
</ol>

<ul>
  <li>도커 cli로 <strong>(관리자권한)</strong> 명령어 실행</li>
  <li><code class="language-plaintext highlighter-rouge">peer chaincode install</code> 체인코드 설치</li>
  <li>체인코드의 이름은 <code class="language-plaintext highlighter-rouge">fabcar</code></li>
  <li>버전관리를 위해 버전정보 <code class="language-plaintext highlighter-rouge">v 1.0</code></li>
  <li>체인코드가 어떤 디렉토리에 있는지 지정 <code class="language-plaintext highlighter-rouge">-p github.com/fabcar/go</code></li>
</ul>

<p><img src="https://velog.velcdn.com/images/-__-/post/ea19b480-746c-4631-b52c-1bb1313010cb/image.png" alt="" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode list --installed</code>
성공적으로 설치가 되었는지 확인 👆</p>
</blockquote>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode instantiate -o orderer.example.com:7050 -n fabcar -v 1.0 -c '{"Args":[]}' -C mychannel -P "OR ('Org1MSP.member','Org2MSP.member')"</code></li>
</ol>

<ul>
  <li>도커 cli로 <strong>(관리자권한)</strong> 명령어 실행</li>
  <li><code class="language-plaintext highlighter-rouge">peer chaincode instantiate</code> 체인코드 배포</li>
  <li>체인코드 배포는 <strong>채널 전체</strong>에 영향을 준다 ⭐</li>
  <li>체인코드 <span style="background-color:#B5E045; color:#000;">‘설치’</span>는 peer 마다 해줘야하지만 <span style="background-color:#B5E045; color:#000;">‘배포’</span>는 채널에 한번만 해주면 된다</li>
  <li><code class="language-plaintext highlighter-rouge">-o orderer.example.com:7050</code> 배포가 되면 orderer 로 전달이 되어야 한다</li>
  <li>어떤 체인코드를 배포할지 이름 <code class="language-plaintext highlighter-rouge">-n fabcar</code></li>
  <li>버전관리를 위해 버전정보 <code class="language-plaintext highlighter-rouge">v 1.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">-c '{"Args":[]}'</code> 체인코드에 <strong>‘Init’ 함수</strong> 원장의 초기값 설정 (key-value 값)</li>
  <li><code class="language-plaintext highlighter-rouge">-C mychannel</code> 배포 될 채널 이름</li>
  <li><code class="language-plaintext highlighter-rouge">-P "OR ('Org1MSP.member','Org2MSP.member')"</code>
👉 <code class="language-plaintext highlighter-rouge">-P</code>는 정책, orderer에 이 내용이 들어간다
👉 “OR” <strong>어떤 조직</strong>이라도 트랜잭션을 승인하면 블록화 시킨다
👉 “AND” <strong>두 조직 모두</strong> 트랜잭션을 승인하면 블록화 시킨다</li>
</ul>

<p><img src="https://velog.velcdn.com/images/-__-/post/df43d543-d98b-4597-9f06-c1d025b50bbc/image.png" alt="" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode list --instantiated -C mychannel</code>
성공적으로 설치가 되었는지 확인 👆</p>
</blockquote>

<ul>
  <li>체인코드 이름 / 버전 / 경로</li>
</ul>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode invoke -o orderer.example.com:7050 -n fabcar -c '{"Args":["initLedger"]}' -C mychannel</code></li>
</ol>

<ul>
  <li>도커 cli로 <strong>(관리자권한)</strong> 명령어 실행</li>
  <li><code class="language-plaintext highlighter-rouge">peer chaincode invoke</code> 체인코드로 트랜잭션을 발생시킨다</li>
  <li><code class="language-plaintext highlighter-rouge">-o orderer.example.com:7050</code> 트랜잭션이 발생하면 블록이 생성되는데 블록이 생성이되려면 ‘orderer’ 의 정보가 필요하다</li>
  <li>어떤 체인코드를 동작시킬지 <code class="language-plaintext highlighter-rouge">-n fabcar</code></li>
  <li><code class="language-plaintext highlighter-rouge">-c '{"Args":["initLedger"]}'</code> 어떤 트랙잭션을 발생시킬지 내용값</li>
  <li>어떤 채널에 있는지 <code class="language-plaintext highlighter-rouge">-C mychannel</code></li>
</ul>

<p><img src="https://velog.velcdn.com/images/-__-/post/eb69abdc-731a-409a-bbcd-697066681ebf/image.png" alt="" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode query -n fabcar -c '{"Args":["queryAllCars"]}' -C mychannel</code>
성공적으로 트랜잭션이 발생했는지 확인 👆</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">peer chaincode query</code> 트랜잭션 내용 전달 (확인)</li>
</ul>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode invoke -o orderer.example.com:7050 -n fabcar -c '{"Args":["createCar","CAR12","sm","sm3","red","shin"]}' -C mychannel</code></li>
</ol>

<ul>
  <li>도커 cli로 <strong>(관리자권한)</strong> 명령어 실행</li>
  <li><code class="language-plaintext highlighter-rouge">peer chaincode invoke</code> 체인코드로 트랜잭션을 발생시킨다</li>
  <li><code class="language-plaintext highlighter-rouge">-o orderer.example.com:7050</code> 트랜잭션이 발생하면 블록이 생성되는데 블록이 생성이되려면 orderer의 정보가 필요하다</li>
  <li>어떤 체인코드를 동작시킬지 <code class="language-plaintext highlighter-rouge">-n fabcar</code></li>
  <li><code class="language-plaintext highlighter-rouge">-c '{"Args":["createCar","CAR12","sm","sm3","red","shin"]}'</code> 어떤 트랙잭션을 발생시킬지 내용값</li>
  <li>어떤 채널에 있는지 <code class="language-plaintext highlighter-rouge">-C mychannel</code></li>
</ul>

<p><img src="https://velog.velcdn.com/images/-__-/post/d976907a-7975-4866-a189-c097d8d14a63/image.png" alt="" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">docker exec cli peer chaincode query -n fabcar -c '{"Args":["queryCar","CAR12"]}' -C mychannel</code>
성공적으로 트랜잭션이 발생했는지 확인 👆</p>
</blockquote>

<hr />

<ol>
  <li><code class="language-plaintext highlighter-rouge">fabric-couchdb</code> 를 이용하고 있어서 <strong>‘월드스테이트’</strong> 를 볼수있다</li>
</ol>

<p><a href="http://localhost:5984/_utils">http://localhost:5984/_utils</a><br />
(👆 월드스테이트 로컬호스트 주소)</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/82d06595-ac2a-4ce8-944c-6cadb7f98afc/image.png" alt="" /></p>

<blockquote>
  <p>👆 <strong>‘월드스테이트’</strong> 데이터 베이스
‘이더스캔’ , ‘클레이스코프’ 와 같이
트랜잭션 발생 내용을 UI 로 확인할 수 있다</p>
</blockquote>

<p><img src="https://velog.velcdn.com/images/-__-/post/b8ccb89c-006e-4dff-998a-ee048fdcbb7a/image.png" alt="" /></p>

<blockquote>
  <p>👆 <strong>‘CAR12’ Metadata</strong>
체인코드로 트랜잭션을 발생시킨 값이
key-value 데이터로 잘 담긴걸 확인 할 수 있다</p>
</blockquote>

<p><img src="https://velog.velcdn.com/images/-__-/post/9e902360-054c-4354-9ac1-ebcff4e7539b/image.png" alt="" /></p>

<blockquote>
  <p>👆 <strong>‘CAR12’ json</strong>
체인코드로 트랜잭션을 발생시킨
<code class="language-plaintext highlighter-rouge">"CAR12","sm","sm3","red","shin"</code> 데이터가
JSON 형식으로 잘 담긴걸 확인 할 수 있다</p>
</blockquote>

<hr />
:ET