I"LY<p><img src="https://velog.velcdn.com/images/-__-/post/87710de9-fc87-4251-bc66-fd387bbf9b66/image.png" alt="" /></p>

<h3 id="-project-lion-nft-블록체인-마켓-앱-만들기-with-그라운드x-3기---챕터-4-6-회고">🦁 [PROJECT LION] NFT 블록체인 마켓 앱 만들기 with 그라운드X 3기 - 챕터 4-6 회고</h3>

<hr />

<h3 id="klip">Klip</h3>

<p>Klip은 모바일용 블록체인 지갑 서비스이다<br />
👉 카카오톡에 연동되어 메신저만큼 쉬운 사용자 경험을 제공한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/f73d7dc5-d4f7-40ca-a358-a28bd3d90a8a/image.png" alt="" /></p>

<hr />

<h3 id="klip-api">Klip API</h3>

<p>Klip API는 외부 서비스에서 API를 통해<br />
Klip에 있는 토큰을 전송하거나<br />
NFT 발행 &amp; 조회 &amp; 전송 &amp; 삭제하는 기능을 제공한다</p>

<p><a href="https://docs.klipwallet.com/">https://docs.klipwallet.com/</a><br />
(👆 Klip Docs)</p>

<hr />

<h3 id="klip-api를-이용하여-klip-지갑-연동-메인넷">Klip API를 이용하여 Klip 지갑 연동 (메인넷)</h3>

<p>-1. Klaytn IDE 에서 간단한 스마트 컨트랙트 코드를 작성하고 <strong>배포(Deploy)</strong></p>

<p>👉 카운터 숫자를 증가시키는 예제</p>

<blockquote>
  <p>⭐ Klip 은 테스트넷(Baobab) 에서 실행을 못하기때문에<br />
메인넷에서 사용할 <strong>실제 KLAY</strong> 가 필요하다 ❗</p>
</blockquote>

<p><img src="https://velog.velcdn.com/images/-__-/post/09b09cee-7244-41e2-8c39-363acc5bdc33/image.png" alt="" /></p>

<blockquote>
  <p>배포하고 나온 <span style="background-color:#FFC701; color:#000;">ABI / 컨트랙트 주소</span> 를 복사한다</p>
</blockquote>

<hr />

<p>-2. <strong>ABI / 컨트랙트 주소</strong> 를 입력하고 <code class="language-plaintext highlighter-rouge">axios</code> 를 이용해 API 호출을 한다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/a86f2b15-5d4c-4756-b1dd-f296fad04679/image.png" alt="" /></p>

<blockquote>
  <p>이때 ❗ <strong>ABI 는 다 가져오지않고 내가 호출하고싶은 (변경하고싶은 값) 컨트랙트만 가져와서 붙여넣는다</strong> (setCount)</p>
</blockquote>

<blockquote>
  <p><a href="https://docs.klipwallet.com/rest-api/rest-api-a2a">https://docs.klipwallet.com/rest-api/rest-api-a2a</a><br />
(👆 API 코드는 Klip Docs에 나와있음)</p>
</blockquote>

<hr />

<p>-3. 앞에 작성된 코드에 이어서 <code class="language-plaintext highlighter-rouge">request_key</code> 값을 이용해서 API를 가져오고 콜백함수 <code class="language-plaintext highlighter-rouge">setQrCodeValue</code> 에 담아준다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/7c0daaf1-66ff-4573-994b-ae5222bf9396/image.png" alt="" /></p>

<hr />

<p>-4. <code class="language-plaintext highlighter-rouge">App.js</code> 로 돌아와서 <strong>Klip</strong> 지갑 연동을 위해 QR코드 생성해준다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/cc1b0768-2867-4580-a38c-e80c7f547143/image.png" alt="" /></p>

<blockquote>
  <p>👆 콜백함수로 받았던 자리에 <strong>setState</strong> 값을 대입해서 QR코드 value 값을 바꿔준다</p>
</blockquote>

<hr />

<p>-5. <code class="language-plaintext highlighter-rouge">npm run start</code> 로 실행시킨뒤 확인해보면 기본값인 QR코드가 나온다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/6f7c3c1f-f512-44cd-abbe-aad01ebaf025/image.gif" alt="" /></p>

<blockquote>
  <p>👆 버튼을 누르면 <strong>Klip 지갑 연결</strong> QR코드와<br />
<strong>컨트랙트 값을 변경</strong>하는 QR코드가 생성 된다</p>
</blockquote>

<hr />

<p>-6. <code class="language-plaintext highlighter-rouge">카운트 값 변경</code> 버튼을 눌러 생성한 QR코드를 <strong>‘스마트폰’</strong> 으로 스캔해보면 <strong>Klip 로그인창</strong>이 나온다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/f4da7352-df0c-4d9f-9c2f-ee67854b52fa/image.png" alt="" /></p>

<blockquote>
  <p>👆 배포할때 나온 <strong>컨트랙트 주소</strong>가 Klip 에도 똑같이 나오는걸 확인 할 수 있다</p>
</blockquote>

<hr />

<p>-7. Klip 지갑을 연결하면 콘솔창에 <code class="language-plaintext highlighter-rouge">"status" : "pending"</code> 이라는 트랜잭션 발생값이 찍힌다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/3cd3bc93-1596-4063-8854-6f0b07aa8a39/image.PNG" alt="" /></p>

<p><img src="https://velog.velcdn.com/images/-__-/post/099f7314-69e0-4ebf-95e4-4ea543453830/image.png" alt="" /></p>

<blockquote>
  <p>👆 발생한 트랜잭션을 <strong>‘klaytnscope’</strong> 에서 확인해보면<br />
<strong>pending</strong> 중이던 상태가 👉 <strong>Success</strong> 로 바껴 있는걸확인</p>
</blockquote>

<hr />

<p>-8. <strong>Klaytn IDE</strong> 로 다시 돌아가서 <strong>카운트 값 변경 (컨트랙트 값 변경)</strong> 이 잘 되었는지 <code class="language-plaintext highlighter-rouge">count</code> 를 <strong>클릭(call)</strong> 해본다</p>

<p><img src="https://velog.velcdn.com/images/-__-/post/b6e356b4-c56d-47f3-a5e3-8b36313d221e/image.png" alt="" /></p>

<blockquote>
  <p>리액트 코드에서 설정한 <strong>‘2000’</strong> 값으로 값이 변경되어 있는걸 볼 수 있다 ❗</p>
</blockquote>

<hr />

<blockquote>
  <h3 id="카운터-숫자를-증가시키는-스마트컨트랙트-예제-코드">카운터 숫자를 증가시키는 스마트컨트랙트 예제 코드</h3>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: GPL-3.0</span>

<span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">&gt;=</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">24</span> <span class="o">&lt;=</span><span class="mf">0.5</span><span class="p">.</span><span class="mi">6</span><span class="p">;</span>

<span class="nx">contract</span> <span class="nx">Count</span> <span class="p">{</span>
    <span class="nx">uint256</span> <span class="kr">public</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">getBlockNumber</span><span class="p">()</span> <span class="kr">public</span> <span class="nx">view</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">block</span><span class="p">.</span><span class="nx">number</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">uint256</span> <span class="nx">_count</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
        <span class="nx">count</span> <span class="o">=</span> <span class="nx">_count</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<blockquote>
  <h3 id="klip-지갑-연동-후-컨트랙트-값-변경하기-메인넷">Klip 지갑 연동 후 컨트랙트 값 변경하기 (메인넷)</h3>
</blockquote>

<p><strong>UseKlip.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">COUNT_CONTRACT</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">0xA914d3Eb961E209906dc76AF341141Bba712b7f9</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// 배포하고 나온 컨트랙트 주소</span>

<span class="kd">const</span> <span class="nx">A2P_API_PREPARE_URL</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://a2a-api.klipwallet.com/v2/a2a/prepare</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">APP_NAME</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">KLAY_MARKET</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// 공통적으로 들어가는 URL, 파라미터 👉 변수로 지정해준다</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">setCount</span> <span class="o">=</span> <span class="p">(</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setQrCodeValue</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 카운터</span>
  <span class="nx">axios</span>
    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">A2P_API_PREPARE_URL</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">bapp</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="nx">APP_NAME</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">execute_contract</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">transaction</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">to</span><span class="p">:</span> <span class="nx">COUNT_CONTRACT</span><span class="p">,</span>
        <span class="na">abi</span><span class="p">:</span> <span class="dl">'</span><span class="s1">{ "constant": false, "inputs": [{ "name": "_count", "type": "uint256" }], "name": "setCount", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">value</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">params</span><span class="p">:</span> <span class="s2">`[\"</span><span class="p">${</span><span class="nx">count</span><span class="p">}</span><span class="s2">\"]`</span><span class="p">,</span> <span class="c1">// count값을 뭘로 변경할건지 (파라미터값)</span>
      <span class="p">},</span>
    <span class="p">})</span>
    <span class="c1">//     { // 클립 API 에 👉 execute_contract 👉 transaction 파라미터</span>
    <span class="c1">//   "transaction": {</span>
    <span class="c1">//     "from": "0x8756...4321", // optional</span>
    <span class="c1">//     "to": "0xA987...4321", // contract address</span>
    <span class="c1">//     "value": "1000000000000000000", // 단위는 peb. 1 KLAY</span>
    <span class="c1">//     "abi": "...",</span>
    <span class="c1">//     "params": "..."</span>
    <span class="c1">//   }</span>
    <span class="c1">// }</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">requestKey</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">request_key</span><span class="p">;</span>
      <span class="c1">// API 로부터 request_key 값</span>
      <span class="kd">const</span> <span class="nx">qrcode</span> <span class="o">=</span> <span class="s2">`https://klipwallet.com/?target=/a2a?request_key=</span><span class="p">${</span><span class="nx">requestKey</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="nx">setQrCodeValue</span><span class="p">(</span><span class="nx">qrcode</span><span class="p">);</span>
      <span class="c1">// 콜백함수에 담음</span>

      <span class="kd">let</span> <span class="nx">timeId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// 주기적으로 실행한다 (1초마다)</span>
        <span class="nx">axios</span>
          <span class="p">.</span><span class="kd">get</span><span class="p">(</span>
            <span class="s2">`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=</span><span class="p">${</span><span class="nx">requestKey</span><span class="p">}</span><span class="s2">`</span>
          <span class="p">)</span> <span class="c1">// result API에 request_key 값</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">res2</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">// result 값이 있다면</span>
              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[Result] </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">res2</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
              <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timeId</span><span class="p">);</span> <span class="c1">// 주기적으로 실행하던걸 중지</span>
            <span class="p">}</span>
          <span class="p">});</span>
      <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// 1초마다</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">getAddress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">setQrCodeValue</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">axios</span>
    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">A2P_API_PREPARE_URL</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">bapp</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="nx">APP_NAME</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">auth</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">requestKey</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">request_key</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">qrcode</span> <span class="o">=</span> <span class="s2">`https://klipwallet.com/?target=/a2a?request_key=</span><span class="p">${</span><span class="nx">requestKey</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="nx">setQrCodeValue</span><span class="p">(</span><span class="nx">qrcode</span><span class="p">);</span>

      <span class="kd">let</span> <span class="nx">timeId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">axios</span>
          <span class="p">.</span><span class="kd">get</span><span class="p">(</span>
            <span class="s2">`https://a2a-api.klipwallet.com/v2/a2a/result?request_key=</span><span class="p">${</span><span class="nx">requestKey</span><span class="p">}</span><span class="s2">`</span>
          <span class="p">)</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">res2</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[Result] </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">res2</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
              <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timeId</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">});</span>
      <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<hr />

<p><strong>App.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">QRCode</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">qrcode.react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">KlipAPI</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./api/UseKlip</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DEFAULT_QR_CODE</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">DEFAULT</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// QR코드는 기본 DEFAULT 값</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">qrvalue</span><span class="p">,</span> <span class="nx">setQrvalue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">DEFAULT_QR_CODE</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">onGetAddress</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 주소가져오기</span>
    <span class="nx">KlipAPI</span><span class="p">.</span><span class="nx">getAddress</span><span class="p">(</span><span class="nx">setQrvalue</span><span class="p">);</span>
    <span class="c1">// UseKlip.js 에서 getAddress 함수를 가져옴</span>
    <span class="c1">// getAddress에서 받는 인자를 setState에 대입한다</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">onCount</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 카운터 변경하기</span>
    <span class="nx">KlipAPI</span><span class="p">.</span><span class="nx">setCount</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="nx">setQrvalue</span><span class="p">);</span>
    <span class="c1">// UseKlip.js 에서 setCount 함수를 가져옴</span>
    <span class="c1">// setCount에서 받는 인자 / 콜백함수는 setState에 대입한다</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span>
        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">onGetAddress</span><span class="p">();</span>
        <span class="p">}}</span>
      <span class="o">&gt;</span>
        <span class="nx">주소가져오기</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span>
        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">onCount</span><span class="p">();</span>
        <span class="p">}}</span>
      <span class="o">&gt;</span>
        <span class="nx">카운트</span> <span class="nx">값</span> <span class="nx">변경</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">QRCode</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">qrvalue</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<hr />
:ET